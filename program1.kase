kasik

bool bb = true;
int nn = -12;
int nn2 = +12;
int nn3 = 12;
nn2 = nn3 + 12;
float bn = 12.3;
int deneme = 12 + bb;
int deneme2 = 12 - nn2;
int deneme3 = sana * nn2;
int deneme4= nn2 / nn2;
int deneme5 = bn % nn2;
deneme--;
deneme2++;
tukur(deden);

if (true) {
 int b = 12;
} else if (isTrue) {
  tukur(9);
} else if (isFalse) {
  tukur(isFalse)
}  else {
  int b = 12;
  bool a = true;
} 
bool aace = true;
{
    int bbane = 12;
}
if (true) {
 int b = 12;
} 
function afunc() {
  int aa = 5;
  int bb = 3;
  int cc = 4;
  if(aa > cc && {bb < cc && bb < aa}) {
    tukur(2);
  }

  if (true) {
    don 12 + 12
  }

  don 21 + 12
}

function fred(int sa, bool be) {
    int bbane = 12; 
}

fred(a, b);
int b = (3 + 5);
if (2 + 5 > 12 && 5 == b || c) {
    tukur(12);
}


kova anyList = [12, 12.3, 34, true, 12 + 12,12,3^2,4%3, 12.5 % 42     , 12];
kova<int> kovaList = [true, false];
kova <kova<kova<int>>> tridimensin = [[[3], [2, 1 , 31]], [[213], [321331]]];

int b = 15 + tridimensin[0][1][0];
tridimensin[0][1][0 + 2][nx] = 3

int k = bos
if(k != null) {
    tukur(olley)
}


while (true) {
  // infinite loop
  
  /* 
    it is a comment
  */

  int ran = random(0, 20);
  if (ran == 16) {
    // Should be don instead of return to avoid error
    return;
  }
}
// sa
for (int i = 0; i < 12; i = i + 2) {
  tukur(12);
}
bicak
